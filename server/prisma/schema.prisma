generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  hashedPassword String @db.VarChar(255)
  role Role @default(TEAM)
  verified Boolean @default(false)
  refreshTokens RefreshToken[]
  oneTimePasscode OneTimePasscode[]
  active Boolean @default(true)
}

model RefreshToken {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedToken String
  revoked Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model OneTimePasscode {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hashedOTP String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique
}

model Category {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  post Post[]
  active Boolean @default(true)
  postViewCount PostViewCount[]
}

model Tag {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  post Post[]
  active Boolean @default(true)
}

model Media {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type MediaType
  path String @db.VarChar(255)
  newsPost Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  postSection PostSection? @relation(fields: [postSectionId], references: [id], onDelete: Cascade)
  postSectionId Int?
  promotionaryPost PromotionaryPost? @relation(fields: [promotionaryPostId], references: [id], onDelete: Cascade)
  promotionaryPostId Int?
  testimonial Testimonial? @relation(fields: [testimonialId], references: [id], onDelete: Cascade)
  testimonialId Int?
}

model PostSection {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String? @db.VarChar(255)
  content String
  sequence Int
  media Media[]
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @db.VarChar(255)
  media Media[]
  postSection PostSection[]
  tag Tag[]
  setAsBanner Boolean @default(false)
  active Boolean @default(true)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  postViewCount PostViewCount?
}

model PromotionaryPost {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  priority Int
  title String @db.VarChar(255)
  content String
  media Media[]
  setAsBanner Boolean @default(false)
  active Boolean @default(true)
  promotionaryPostViewCount PromotionaryPostViewCount?
}

model PromotionaryPostViewCount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count Int @default(0)
  promotionaryPost PromotionaryPost @relation(fields: [promotionaryPostId], references: [id], onDelete: Cascade)
  promotionaryPostId Int @unique
}

model PostViewCount {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count Int @default(0)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int @unique
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

model Testimonial {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quote String? @db.VarChar(255)
  quoutedBy String?
  media Media[]
  active Boolean @default(true)
}

enum Role {
  TEAM
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
}